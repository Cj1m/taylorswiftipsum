"use strict";

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

(function() {
    var easterEgg = window.easterEgg || {};
    function initEasterEggs() {
        var snow = (0, _jquery2.default)(".snowContainer");
        easterEgg.counter = easterEgg.counter || 0;
        easterEgg.counter++;
        if (easterEgg.counter % 13 === 0) {
            snow.css("background-image", 'url("https://usatlife.files.wordpress.com/2014/08/everswifttumblrcom.gif?w=1000")');
            //https://usatlife.files.wordpress.com/2014/08/everswifttumblrcom.gif?w=1000
            snow.addClass("snowing");
        }
        if (easterEgg.counter > 13 && easterEgg.counter % 13 === 1) {
            snow.removeClass("snowing");
            snow.css("background-image", "");
        }
    }
    function isChristmas(forcedValue) {
        var today = new Date();
        easterEgg.xmas = forcedValue ? forcedValue : today.getMonth() === 11 && today.getDay() === 25;
        christmasTheme();
    }
    function christmasTheme() {
        var todayIsXmas;
        if (easterEgg.xmas === true) {
            (0, _jquery2.default)("h1").append('<img class="xmashat" src="imgs/xmashat.png" />');
            (0, _jquery2.default)(".albumCheckBoxes").append('<label id="christmasAlbum" class="hidden"><input class="album hidden" type="checkbox" value="soundsoftheseason"><span class="album-title">Sounds Of The Season</span></label>');
            (0, _jquery2.default)("#christmasAlbum").fadeIn(2e3);
            todayIsXmas = true;
        } else {
            console.log("It's not christmas. Bummer.");
            todayIsXmas = false;
        }
        return todayIsXmas;
    }
    (0, _jquery2.default)("#lorem-submitum").on("click", initEasterEggs);
})();

"use strict";

var _underscore = require("underscore");

var _underscore2 = _interopRequireDefault(_underscore);

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

(function() {
    _jquery2.default.ajax({
        url: "http://api.giphy.com/v1/gifs/search?q=taylor+swift&limit=100&api_key=12PnkylgHYUVgs",
        dataType: "json",
        success: function success(result) {
            var allGifs = [];
            var restricted = [];
            var restrictedIds = [ "cIGd1ypgKQANi", "10vTFkY3S0ImRO" ];
            //TODO: refactor
            _underscore2.default.each(result.data, function(gifInfo) {
                if (gifInfo.id === "10vTFkY3S0ImRO" || gifInfo.id === "cIGd1ypgKQANi") {
                    restricted.push(gifInfo);
                } else {
                    allGifs.push(gifInfo);
                }
            });
            window.allGifs = allGifs;
        }
    });
})();

"use strict";

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

(function() {
    window.Model = function Model() {
        "use strict";
        this.wordCount = 130;
        this.albums = {
            ts: true,
            nineteenEightyNine: false,
            red: false,
            speakNow: false,
            fearless: false,
            taylorSwift: false,
            soundsoftheseason: false
        };
        this.rawLyrics = "who run the world";
        this.getWordCount = function getWordCount() {
            var self = this;
            this.wordCount = (0, _jquery2.default)("#numberWords").val() || "130";
            if (this.wordCount >= 5e5) {
                window.utility.showError("Trying to break me like a promise? Generating default 130 words.");
                self.wordCount = "130";
            } else if (this.wordCount.match(/[^0-9]/g)) {
                window.utility.showError("Word count should be numeric value, generating default 130 words.");
                self.wordCount = "130";
            }
            return this.wordCount;
        };
        this.getLyricsByAlbums = function getAlbums() {
            var selectedAlbums = [], allLyrics = [];
            //get albums set to true
            for (var album in this.albums) {
                if (this.albums[album] === true) {
                    selectedAlbums.push(album);
                }
            }
            //get all associated lyrics
            for (var i = 0; i < selectedAlbums.length; i++) {
                allLyrics = allLyrics.concat(lingo[selectedAlbums[i]]);
            }
            this.rawLyrics = allLyrics;
            return allLyrics;
        };
        this.updateCheckedAlbums = function updateCheckedAlbums() {
            for (var i = 0; i < (0, _jquery2.default)(".album").length; i++) {
                if ((0, _jquery2.default)(".album")[i].checked === true) {
                    this.albums[(0, _jquery2.default)(".album")[i].value] = true;
                } else {
                    this.albums[(0, _jquery2.default)(".album")[i].value] = false;
                }
            }
            return this.albums;
        };
        this.randomizeWords = function randomizeWords() {
            var storeWords = [], wordCount = this.wordCount, combinedWords = this.rawLyrics, counter = 0, finalWords, output;
            while (counter <= wordCount) {
                //get a new random number each time within the range of the combinedWords array
                var randomNumber = Math.round(Math.random() * (combinedWords.length - 1));
                var spaces = combinedWords[randomNumber].match(/\s/g) || [];
                counter = counter + (spaces.length + 1);
                storeWords.push(combinedWords[randomNumber]);
            }
            //combine storeWords into 1 string to split them by each word, lob off extra words
            finalWords = storeWords.join(" ").split(" ").splice(0, wordCount);
            this.randomizedWords = finalWords;
            return finalWords;
        };
        this.randomizedWords = "randomized words";
        this.addGrammar = function addGrammar() {
            var wordCount = parseInt(this.wordCount), words = this.randomizedWords, counter = 0;
            while (counter >= 0 && counter < wordCount - 12) {
                var randomNumber = parseInt(window.utility.getRandomNumberBtwn(5, 11));
                counter = counter + randomNumber;
                //include the next capitalized word 
                //keep track of what index we're at and make sure it never gets bigger than the array length
                words[counter] = words[counter] + ".";
                // add punctuation
                words[counter + 1] = words[counter + 1].charAt(0).toUpperCase() + words[counter + 1].slice(1);
            }
            //capitalize the first word of paragraph & add punctuation to last word of paragraph
            words[0] = words[0].charAt(0).toUpperCase() + words[0].slice(1);
            words[words.length - 1] = words[words.length - 1] + ".";
            this.ipsum = words.join(" ");
            return words.join(" ");
        };
        this.ipsum = "taylorSwiftIpsum.com";
    };
})();

"use strict";

(function(i, s, o, g, r, a, m) {
    i["GoogleAnalyticsObject"] = r;
    i[r] = i[r] || function() {
        (i[r].q = i[r].q || []).push(arguments);
    }, i[r].l = 1 * new Date();
    a = s.createElement(o), m = s.getElementsByTagName(o)[0];
    a.async = 1;
    a.src = g;
    m.parentNode.insertBefore(a, m);
})(window, document, "script", "//www.google-analytics.com/analytics.js", "ga");

ga("create", "UA-56746590-1", "auto");

ga("send", "pageview");

"use strict";

var _underscore = require("underscore");

var _underscore2 = _interopRequireDefault(_underscore);

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

(function() {
    _jquery2.default.ajax({
        url: "http://api.tumblr.com/v2/blog/taylorswift.tumblr.com/posts?api_key=lFtJkzttWGO9Gz1xH6isQNVPidE4xIVV5XqPqzMfTzeg6vfUMw",
        dataType: "jsonp",
        success: function success(result) {
            var hashTagArray = [];
            _underscore2.default.each(result.response.posts, function(post) {
                _underscore2.default.each(post.tags, function(tag) {
                    hashTagArray.push("#" + tag);
                });
            });
            window.lingo.hashtags = hashTagArray;
        }
    });
})();

"use strict";

!function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0], p = /^http:/.test(d.location) ? "http" : "https";
    if (!d.getElementById(id)) {
        js = d.createElement(s);
        js.id = id;
        js.src = p + "://platform.twitter.com/widgets.js";
        fjs.parentNode.insertBefore(js, fjs);
    }
}(document, "script", "twitter-wjs");

"use strict";

var $ = require("jquery");

(function() {
    "use strict";
    window.utility = {
        getRandomNumberBtwn: function getRandomNumberBtwn(min, max) {
            var seed = Math.round(Math.random() * max), result;
            if (seed < min) {
                result = getRandomNumberBtwn(min, max);
            } else {
                result = seed;
            }
            return result;
        },
        changeHtml: function changeHtml(id, words) {
            var location = document.getElementById(id);
            location.innerHTML = words;
        },
        refreshOnce: function refreshOnce(element, callback, options) {
            if (!element.hasClass("updated")) {
                element.addClass("updated");
                if (callback && typeof callback === "function") {
                    if (options) {
                        //accepts more than 1 param by setting options to an obj
                        callback.call(element, options);
                    } else {
                        callback.call(element);
                    }
                }
                return element;
            } else {
                return;
            }
        },
        fadeReplaceText: function fadeReplaceText(options) {
            var $el = options.element, copy = options.copy;
            $el.fadeOut("fast", function() {
                $el.text(copy).fadeIn();
            });
        },
        showError: function showError(errorText) {
            $(".errorMessage").text(errorText).css("display", "block").fadeOut(9e3, "linear");
        }
    };
})();

"use strict";

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

window.View = function View(options) {
    "use strict";
    this.model = options.model || {};
    this.$el = options.$el;
    self = this;
    this.init = function() {
        self.model.getWordCount();
        self.model.updateCheckedAlbums();
        self.model.getLyricsByAlbums();
        self.model.randomizeWords();
        self.model.addGrammar();
        self.renderView();
    };
    this.renderView = function() {
        replaceGif();
        window.utility.changeHtml("outputWords", self.model.ipsum);
        (0, _jquery2.default)("html, body").animate({
            scrollTop: 0
        }, "slow");
        refreshView();
    };
    var refreshView = function refreshView() {
        var resultBox = (0, _jquery2.default)("#lorem-result"), gif = (0, _jquery2.default)(".giphy-container"), loading = (0, 
        _jquery2.default)(".loading");
        //the first time submit is clicked we introduce the black box
        if (resultBox.css("display") === "none") {
            resultBox.css("display", "block");
            resultBox.animate({
                height: 300
            }, "slow");
        }
        //show gif loading
        gif.css("display", "block");
        loading.fadeIn();
        //wait then remove & refresh
        setTimeout(function() {
            //remove gif & loading
            loading.fadeOut("slow");
            gif.fadeOut("slow", function() {
                //fix black box height
                resultBox.css("min-height", "300px").css("height", "auto");
                //display new ipsum
                (0, _jquery2.default)("#outputWords").fadeIn();
                window.utility.refreshOnce((0, _jquery2.default)("h1"), window.utility.fadeReplaceText, {
                    element: (0, _jquery2.default)("h1"),
                    copy: "Want more?"
                });
                window.utility.refreshOnce((0, _jquery2.default)(".intro-text"), window.utility.fadeReplaceText, {
                    element: (0, _jquery2.default)(".intro-text"),
                    copy: "Want to try again with different selections? No problem. Just fill out the form below & click the submit button again for another round of Taylor Swift Ipsum!"
                });
                window.utility.refreshOnce((0, _jquery2.default)(".masterpiece"), _jquery2.default.fn.fadeIn);
                replaceGif();
            });
        }, 2e3);
    };
    var replaceGif = function replaceGif() {
        console.log("pooping");
        var randomNumber = window.utility.getRandomNumberBtwn(0, window.allGifs.length - 1);
        var gifUrl = window.allGifs[randomNumber].images.fixed_height.url || "http://media3.giphy.com/media/RrNielf11uMsU/200.gif";
        var gifWidth = window.allGifs[randomNumber].images.fixed_height.width || "361";
        var gifHeight = window.allGifs[randomNumber].images.fixed_height.height || "200";
        var containerWidth = parseInt(gifWidth);
        var containerHeight = parseInt(gifHeight) + 50;
        var calcMarginLeft = containerWidth / 2 - gifWidth / 2 + "px";
        var marginLeftGif = parseInt(gifWidth) + 60 + "px";
        (0, _jquery2.default)("#gifyimg").remove();
        (0, _jquery2.default)(".giphy-container").css("width", containerWidth);
        (0, _jquery2.default)(".giphy-container").css("height", containerHeight);
        (0, _jquery2.default)(".gif").append((0, _jquery2.default)("<img>", {
            id: "gifyimg",
            src: gifUrl
        }));
        (0, _jquery2.default)("#gifyimg").css("margin-left", calcMarginLeft);
    };
    this.hideCurrentWords = function() {
        var currentWords = (0, _jquery2.default)("#outputWords");
        if (currentWords.css("display") === "block") {
            currentWords.css("display", "none");
        } else {
            return;
        }
    };
    (0, _jquery2.default)("#lorem-submitum").on("click", this.hideCurrentWords);
    (0, _jquery2.default)("#lorem-submitum").on("click", this.init);
};

"use strict";

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

(function() {
    var model = new window.Model(), view = new window.View({
        model: model,
        $el: (0, _jquery2.default)("#lorem-result")
    });
})();